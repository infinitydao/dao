function(create_install)
	if(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
		set(INSTALL_DIRECTORY ".")
		set(SLASH "\\\\")
		set(SCRIPT_EXT ".bat")
	else(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
		set(INSTALL_DIRECTORY "bin")
		set(SLASH "/")
		set(SCRIPT_EXT ".sh")
	endif(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
	
	foreach (CUR_HEADER ${FULL_HEADERS_LIST})
		get_filename_component(CUR_HEADER_NAME ${CUR_HEADER} NAME)
		if(NOT IS_ABSOLUTE ${CUR_HEADER})
			set(CURRENT_FULL_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${CUR_HEADER})
		endif(NOT IS_ABSOLUTE ${CUR_HEADER})
		install(FILES ${CURRENT_FULL_PATH} DESTINATION include/${PROJECT_NAME} COMPONENT include)
	endforeach (CUR_HEADER ${FULL_HEADERS_LIST})
	
	get_target_property(${PROJECT_NAME}_IMPORTED ${PROJECT_NAME} IMPORTED)
	get_target_property(${PROJECT_NAME}_TYPE ${PROJECT_NAME} TYPE)
	if (NOT ${PROJECT_NAME}_IMPORTED)
		if(${${PROJECT_NAME}_TYPE} STREQUAL EXECUTABLE)
			set(GROUP_CONFIGS applications)
			set(START_SCRIPT_PATH START_SCRIPT_PATH-NOTFOUND)
			foreach(SUB_FOLDER ${SUB_FOLDERS})
				if(${START_SCRIPT_PATH} STREQUAL START_SCRIPT_PATH-NOTFOUND)
					find_file(START_SCRIPT_PATH start_${PROJECT_NAME}${SCRIPT_EXT} PATHS ${EXECUTABLE_DIR}/${SUB_FOLDER} NO_DEFAULT_PATH)
				endif(${START_SCRIPT_PATH} STREQUAL START_SCRIPT_PATH-NOTFOUND)
			endforeach(SUB_FOLDER ${SUB_FOLDERS})
			if(NOT ${START_SCRIPT_PATH} STREQUAL START_SCRIPT_PATH-NOTFOUND)
				install(FILES ${START_SCRIPT_PATH} DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
			endif(NOT ${START_SCRIPT_PATH} STREQUAL START_SCRIPT_PATH-NOTFOUND)
			install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
			add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_RUNTIME_OUTPUT_DIRECTORY} ".")
		elseif(${${PROJECT_NAME}_TYPE} STREQUAL SHARED_LIBRARY)
			set(GROUP_CONFIGS libraries)
			# Если для данной библиотеки предписано специальное месторасположение
			if(DEFINED ${PROJECT_NAME}_PECULIAR_FOLDER)
				install(TARGETS ${PROJECT_NAME} DESTINATION "${INSTALL_DIRECTORY}/${${PROJECT_NAME}_PECULIAR_FOLDER}" COMPONENT ${GROUP_CONFIGS})
				add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY} "${${PROJECT_NAME}_PECULIAR_FOLDER}")
			else(DEFINED ${PROJECT_NAME}_PECULIAR_FOLDER)
				install(TARGETS ${PROJECT_NAME} DESTINATION "${INSTALL_DIRECTORY}/${INSTALL_SHARED_LIBRARY}" COMPONENT ${GROUP_CONFIGS})
				add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY} "${INSTALL_SHARED_LIBRARY}")
			endif(DEFINED ${PROJECT_NAME}_PECULIAR_FOLDER)	
		elseif(${${PROJECT_NAME}_TYPE} STREQUAL MODULE_LIBRARY)
			if(NOT DEFINED COM_DLL)
				set(GROUP_CONFIGS ${PROJECT_NAME})
				# Если для данной библиотеки предписано специальное месторасположение
				if(DEFINED ${PROJECT_NAME}_PECULIAR_FOLDER)
					install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION "${INSTALL_DIRECTORY}/${${PROJECT_NAME}_PECULIAR_FOLDER}" COMPONENT ${GROUP_CONFIGS})
					add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ${${PROJECT_NAME}_PECULIAR_FOLDER})
				else(DEFINED ${PROJECT_NAME}_PECULIAR_FOLDER)
					install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION "${INSTALL_DIRECTORY}/${INSTALL_MODULE_LIBRARY}" COMPONENT ${GROUP_CONFIGS})
					add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ${MODULE_LIBRARY_DIR})
				endif(DEFINED ${PROJECT_NAME}_PECULIAR_FOLDER)			
				get_property(LIST_MODULES GLOBAL PROPERTY LIST_MODULES)
				if(DEFINED LIST_MODULES)
					set_property(GLOBAL APPEND PROPERTY LIST_MODULES ${PROJECT_NAME})
				else(DEFINED LIST_MODULES)
					set_property(GLOBAL APPEND PROPERTY LIST_MODULES ${PROJECT_NAME})
				endif(DEFINED LIST_MODULES)
			else(NOT DEFINED COM_DLL)
				get_property(LIST_REGDLL GLOBAL PROPERTY LIST_REGDLL)
				if(DEFINED LIST_REGDLL)
					set_property(GLOBAL APPEND PROPERTY LIST_REGDLL $INSTDIR\\\\${PROJECT_NAME}.dll)
				else(DEFINED LIST_REGDLL)
					set_property(GLOBAL APPEND PROPERTY LIST_REGDLL $INSTDIR\\\\${PROJECT_NAME}.dll)
				endif(DEFINED LIST_REGDLL)
				if(DEFINED LIST_UNREGDLL)
					set_property(GLOBAL APPEND PROPERTY LIST_UNREGDLL $INSTDIR\\\\${PROJECT_NAME}.dll)
				else(DEFINED LIST_UNREGDLL)
					set_property(GLOBAL APPEND PROPERTY LIST_UNREGDLL $INSTDIR\\\\${PROJECT_NAME}.dll)
				endif(DEFINED LIST_UNREGDLL)
				set(GROUP_CONFIGS libraries)
				install(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
				add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ".")
			endif(NOT DEFINED COM_DLL)
		elseif(${${PROJECT_NAME}_TYPE} STREQUAL STATIC_LIBRARY)
			add_pdb(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_ARCHIVE_OUTPUT_DIRECTORY} ".")
		endif(${${PROJECT_NAME}_TYPE} STREQUAL EXECUTABLE)
	else (NOT ${PROJECT_NAME}_IMPORTED)
		unset(GROUP_CONFIGS)
		get_target_property(${PROJECT_NAME}_IMPORTED_LOCATION ${PROJECT_NAME} IMPORTED_LOCATION)
		if(${${PROJECT_NAME}_TYPE} STREQUAL EXECUTABLE)
			set(GROUP_CONFIGS applications)
		elseif (${${PROJECT_NAME}_TYPE} STREQUAL SHARED_LIBRARY)
			set(GROUP_CONFIGS libraries)
		elseif (${${PROJECT_NAME}_TYPE} STREQUAL MODULE_LIBRARY)
			set(GROUP_CONFIGS ${PROJECT_NAME})
		endif (${${PROJECT_NAME}_TYPE} STREQUAL EXECUTABLE)
		if (DEFINED GROUP_CONFIGS)
			install(FILES ${${PROJECT_NAME}_IMPORTED_LOCATION} DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
		endif (DEFINED GROUP_CONFIGS)
	endif (NOT ${PROJECT_NAME}_IMPORTED)
	if(DEFINED ${PROJECT_NAME}_ASSETS)
		set(GROUP_CONFIGS libraries)
		foreach(ASSET_PATH ${${PROJECT_NAME}_ASSETS})
			if(NOT IS_ABSOLUTE ${ASSET_PATH})
				set(ASSET_PATH ${CMAKE_CURRENT_SOURCE_DIR}/${ASSET_PATH})
			endif(NOT IS_ABSOLUTE ${ASSET_PATH})
			if(IS_DIRECTORY ${ASSET_PATH})
				install(DIRECTORY ${ASSET_PATH} DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS} PATTERN .svn EXCLUDE)
			else(IS_DIRECTORY ${ASSET_PATH})
				install(FILES ${ASSET_PATH} DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
			endif(IS_DIRECTORY ${ASSET_PATH})
		endforeach(ASSET_PATH ${${PROJECT_NAME}_ASSETS})
    endif(DEFINED ${PROJECT_NAME}_ASSETS)
	
	if(DEFINED QT4_FOUND)
		set(GROUP_CONFIGS libraries)
		set(LIST_QT_BINARY QtCore QtXml QtXmlPatterns QtTest QtGui QtNetwork QtScript QtSql QtWebKit QtOpenGL QtSvg)
		foreach(QT_BINARY ${LIST_QT_BINARY})
			string(TOUPPER ${QT_BINARY} QT_BINARY_UPPER)
			if(DEFINED QT_USE_${QT_BINARY_UPPER})
				find_file(${QT_BINARY_UPPER}_PATH "${QT_BINARY}${QT_VERSION_MAJOR}${CMAKE_SHARED_MODULE_SUFFIX}" PATHS ${QT_BINARY_DIR} NO_DEFAULT_PATH)
				if(NOT ${${QT_BINARY_UPPER}_PATH} STREQUAL ${QT_BINARY_UPPER}_PATH-NOTFOUND)
					install(FILES ${${QT_BINARY_UPPER}_PATH} DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
				endif(NOT ${${QT_BINARY_UPPER}_PATH} STREQUAL ${QT_BINARY_UPPER}_PATH-NOTFOUND)
			endif(DEFINED QT_USE_${QT_BINARY_UPPER})
		endforeach(QT_BINARY ${LIST_QT_BINARY})
	endif(DEFINED QT4_FOUND)
	
	if(DEFINED PostgreSQL_FOUND)
		if(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
			set(GROUP_CONFIGS libraries)
			set(LIST_PostgreSQL_BINARY iconv libeay32 libiconv-2 libintl-8 libpq libxml2 libxslt ssleay32 zlib1)
			foreach(CURRENT_BINARY ${LIST_PostgreSQL_BINARY})
				find_file(${CURRENT_BINARY}_PATH "${CURRENT_BINARY}${CMAKE_SHARED_MODULE_SUFFIX}" PATHS "${PostgreSQL_LIBRARY_DIRS}/../bin" NO_DEFAULT_PATH)
				if(NOT ${${CURRENT_BINARY}_PATH} STREQUAL ${CURRENT_BINARY}_PATH-NOTFOUND)
					install(FILES ${${CURRENT_BINARY}_PATH} DESTINATION ${INSTALL_DIRECTORY} COMPONENT ${GROUP_CONFIGS})
				endif(NOT ${${CURRENT_BINARY}_PATH} STREQUAL ${CURRENT_BINARY}_PATH-NOTFOUND)
			endforeach(CURRENT_BINARY ${LIST_PostgreSQL_BINARY})
		endif(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
	endif(DEFINED PostgreSQL_FOUND)
	
	if(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})
		set(COMPANY_NAME "niidar")
		set(COMPANY_EMAIL "nio9@niidar.ru")
		set(COMPANY_WEBSITE "http://www.niidar.ru")
		
		set(CPACK_PACKAGE_INSTALL_DIRECTORY "${COMPANY_NAME}${SLASH}${CMAKE_PROJECT_NAME}")
		set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "${COMPANY_NAME}${SLASH}${CMAKE_PROJECT_NAME}")
		set(CPACK_RESOURCE_FILE_LICENSE "${ROOT_PATH}/project/license.txt")
		set(CPACK_PACKAGE_ICON "${ROOT_PATH}/poi/res${SLASH}top_install.bmp")
		
		if(NOT DEFINED INSTALL_EXECUTABLE)
			set(INSTALL_EXECUTABLE "${CMAKE_PROJECT_NAME}")
		endif(NOT DEFINED INSTALL_EXECUTABLE)
		#set(CPACK_GENERATOR NSIS)
		
		#set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
		#set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME})
		#set(CPACK_PACKAGE_EXECUTABLES "${INSTALL_EXECUTABLE}" "${CMAKE_PROJECT_NAME}")
		#set(CPACK_NSIS_MENU_LINKS "${INSTALL_EXECUTABLE}.exe" "${CMAKE_PROJECT_NAME}")
		#set(CPACK_CREATE_DESKTOP_LINKS "${CMAKE_PROJECT_NAME}.exe")
		#set(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "${CMAKE_PROJECT_NAME}")
		#set(CPACK_STRIP_FILES TRUE)
		#set(CPACK_NSIS_CONTACT "nio@niidar.ru")
		#Версия по-умолчанию
		set(CPACK_PACKAGE_VERSION_MAJOR "1")
		set(CPACK_PACKAGE_VERSION_MINOR "0")
		set(CPACK_PACKAGE_VERSION_PATCH "0")
		set(CPACK_PROJECT_CONFIG_FILE "${ROOT_PATH}/project/CPack.cmake")
		set(CPACK_SVN_REP_DIR "${CMAKE_SOURCE_DIR}")
		#Версия задаваемая пользователем дефайном VER
		if(DEFINED VER)
			set(CPACK_VER ${VER})
		endif(DEFINED VER)
		
		set(CPACK_SYSTEM_PROCESSOR ${CMAKE_SYSTEM_PROCESSOR})
		
		set(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
		set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
		#set(CPACK_PACKAGE_DEFAULT_LOCATION "./bin")
		#set(CPACK_PACKAGING_INSTALL_PREFIX "bin")
		
		if(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
			set(CPACK_GENERATOR "NSIS")
		else(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
			set(CPACK_GENERATOR "STGZ")
		endif(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
		
		if(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
			if(CPACK_GENERATOR MATCHES "NSIS")
				set(CPACK_NSIS_INSTALLED_ICON_NAME "$INSTDIR\\\\${INSTALL_EXECUTABLE}.exe")
				#set(CPACK_NSIS_MUI_FINISHPAGE_RUN "..\\\\${INSTALL_EXECUTABLE}.exe")						
				set(CPACK_NSIS_DISPLAY_NAME ${CMAKE_PROJECT_NAME})
				set(CPACK_NSIS_COMPRESSOR "/SOLID lzma")
				set(CPACK_NSIS_MUI_ICON "${ROOT_PATH}/poi/res/\\\\install.ico")
				set(CPACK_NSIS_MUI_UNIICON "${ROOT_PATH}/poi/res/\\\\uninstall.ico")
				#set(CPACK_NSIS_MODIFY_PATH ON)	
				
				set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS "
					CreateShortCut \\\"$DESKTOP\\\\${CMAKE_PROJECT_NAME}.lnk\\\" \\\"$INSTDIR\\\\${INSTALL_EXECUTABLE}.exe\\\"
					CreateShortCut \\\"$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${CMAKE_PROJECT_NAME}.lnk\\\" \\\"$INSTDIR\\\\${INSTALL_EXECUTABLE}.exe\\\"
					")
				set(CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "
					Delete \\\"$DESKTOP\\\\${CMAKE_PROJECT_NAME}.lnk\\\"
					Delete \\\"$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\${CMAKE_PROJECT_NAME}.lnk\\\"
					")
			endif(CPACK_GENERATOR MATCHES "NSIS")
			#set(CMAKE_INSTALL_MFC_LIBRARIES 1)
			#set(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP "true")
			#include(InstallRequiredSystemLibraries)
			#install(PROGRAMS ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS} DESTINATION ${INSTALL_DIRECTORY} COMPONENT libraries)
			
			set(CPACK_COMPONENTS_GROUPING "ALL_COMPONENTS_IN_ONE")
			set(CPACK_COMPONENTS_ALL applications libraries pdb include)
			set(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME "Application")
			set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME "Libraries")
			set(CPACK_COMPONENT_PDB_DISPLAY_NAME "Pdb")
			set(CPACK_COMPONENT_INCLUDE_DISPLAY_NAME "Include")
			#set(CPACK_COMPONENT_APPLICATIONS_DESCRIPTION "Основное приложение, без которого ничего работать не будет")
			#set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION "Библиотеки, без которых основное приложение работать не будет")
			set(CPACK_COMPONENT_APPLICATIONS_REQUIRED TRUE)
			set(CPACK_COMPONENT_LIBRARIES_REQUIRED TRUE)
			set(CPACK_COMPONENT_INCLUDE_DISABLED TRUE)
			get_property(LIST_MODULES GLOBAL PROPERTY LIST_MODULES)
			foreach(CURRENT_MODULE ${LIST_MODULES})
				set(CPACK_COMPONENTS_ALL ${CPACK_COMPONENTS_ALL} ${CURRENT_MODULE})
				string(TOUPPER ${CURRENT_MODULE} TOUPPER_CURRENT_MODULE)
				set(CPACK_COMPONENT_${TOUPPER_CURRENT_MODULE}_DISPLAY_NAME "${CURRENT_MODULE}")
				set(CPACK_COMPONENT_${TOUPPER_CURRENT_MODULE}_GROUP "Plugins")
				#set(CPACK_COMPONENT_${TOUPPER_CURRENT_MODULE}_DEPENDS libraries)
			endforeach(CURRENT_MODULE ${LIST_MODULES})
			#set(CPACK_COMPONENT_GROUP_PLUGINS_EXPANDED TRUE)
			#set(CPACK_COMPONENT_CONFIGS_DISPLAY_NAME "Configs")
			#set(CPACK_COMPONENT_CONFIGS_DESCRIPTION "Конфигурационные файлы, без которых основное приложение работать не будет должным образом")
			#set(CPACK_COMPONENT_CONFIGS_DEPENDS libraries)
			#set(CPACK_COMPONENT_APPLICATIONS_GROUP "Runtime")
			#set(CPACK_COMPONENT_LIBRARIES_GROUP "Development")
			#set(CPACK_COMPONENT_CONFIGS_GROUP "Development")
			#set(CPACK_COMPONENT_KIMSPLUGIN_DISPLAY_NAME "Kims")
			#set(CPACK_COMPONENT_IMVOPLUGIN_DISPLAY_NAME "Imvo")
			#set(CPACK_COMPONENT_KIMSPLUGIN_GROUP "Plugins")
			#set(CPACK_COMPONENT_IMVOPLUGIN_GROUP "Plugins")
			#set(CPACK_ALL_INSTALL_TYPES Full Developer)
			#set(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES Developer Full)
			#set(CPACK_COMPONENT_CONFIGS_INSTALL_TYPES Developer Full)
			#set(CPACK_COMPONENT_APPLICATIONS_INSTALL_TYPES Full)
			#get_property(LIST_CONFIGS_PATH GLOBAL PROPERTY LIST_CONFIGS_PATH)
			#if(DEFINED LIST_CONFIGS_PATH)
				# foreach(CONFIG_PATH ${LIST_CONFIGS_PATH})
					# if(IS_DIRECTORY ${CONFIG_PATH})
						# install(DIRECTORY ${CONFIG_PATH} DESTINATION bin PATTERN .svn EXCLUDE)
					# else(IS_DIRECTORY ${CONFIG_PATH})
						# install(FILES ${CONFIG_PATH} DESTINATION bin)
					# endif(IS_DIRECTORY ${CONFIG_PATH})
				# endforeach(CONFIG_PATH ${LIST_CONFIGS_PATH})
			# endif(DEFINED LIST_CONFIGS_PATH)
			
			get_property(LIST_REGDLL GLOBAL PROPERTY LIST_REGDLL)
			if(DEFINED LIST_REGDLL)
				foreach(CURRENT_REGDLL ${LIST_REGDLL})
					list(APPEND CPACK_NSIS_EXTRA_INSTALL_COMMANDS "
						RegDLL \\\"${CURRENT_REGDLL}\\\"")
				endforeach(CURRENT_REGDLL ${LIST_REGDLL})
			endif(DEFINED LIST_REGDLL)
			get_property(LIST_UNREGDLL GLOBAL PROPERTY LIST_UNREGDLL)
			if(DEFINED LIST_UNREGDLL)
				foreach(CURRENT_UNREGDLL ${LIST_UNREGDLL})
					list(APPEND CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS "
						UnRegDLL \\\"${CURRENT_UNREGDLL}\\\"")
				endforeach(CURRENT_UNREGDLL ${LIST_UNREGDLL})
			endif(DEFINED LIST_UNREGDLL)
		endif(${CMAKE_SYSTEM_NAME} STREQUAL Windows)
		include(CPack)
		#install(PROGRAMS ${PROJECT_NAME} DESTINATION ${CMAKE_BINARY_DIR}/${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release)
	endif(${CMAKE_PROJECT_NAME} STREQUAL ${PROJECT_NAME})
endfunction(create_install)

function(add_pdb CURRENT_PATH SUB_FOLDER)
	if(WIN32)
		set(GROUP_CONFIGS pdb)
		foreach(CONFIG_FOLDER debug relwithdebinfo)
			install(FILES "${CURRENT_PATH}/${CONFIG_FOLDER}/${SUB_FOLDER}/${PROJECT_NAME}.pdb" DESTINATION pdb CONFIGURATIONS ${CONFIG_FOLDER} COMPONENT ${GROUP_CONFIGS})
		endforeach(CONFIG_FOLDER debug relwithdebinfo)
		unset(GROUP_CONFIGS)
	endif(WIN32)
endfunction(add_pdb CURRENT_PATH SUB_FOLDER)