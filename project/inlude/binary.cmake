function(binary_file TARGET_NAME FILE_NAME BINARY_SYSTEM BINARY_ARCH)
	if (BINARY_SYSTEM STREQUAL CMAKE_SYSTEM_NAME AND BINARY_ARCH STREQUAL CMAKE_SYSTEM_PROCESSOR)
		get_filename_component(FNAME ${FILE_NAME} NAME)
		if (FILE_NAME MATCHES "${CMAKE_STATIC_LIBRARY_SUFFIX}$")
			set(FILE_TYPE STATIC_LIBRARY)
			set(OUT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/${FNAME})
			add_library(${TARGET_NAME} STATIC IMPORTED GLOBAL)
		elseif (FILE_NAME MATCHES "${CMAKE_SHARED_LIBRARY_SUFFIX}$")
			set(FILE_TYPE SHARED_LIBRARY)
			set(OUT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${FNAME})
			add_library(${TARGET_NAME} SHARED IMPORTED GLOBAL)
			set_target_properties(${TARGET_NAME} PROPERTIES IMPORTED_NO_SONAME TRUE IMPORTED_SONAME ${FNAME})
		else ()
			set(FILE_TYPE EXECUTABLE)
			set(OUT_FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${FNAME})
			add_executable(${TARGET_NAME} IMPORTED GLOBAL)
		endif (FILE_NAME MATCHES "${CMAKE_STATIC_LIBRARY_SUFFIX}$")
		get_filename_component(OUT_FILE_NAME ${OUT_FILE_NAME} ABSOLUTE)
		add_custom_command(OUTPUT ${OUT_FILE_NAME}
			COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/${FILE_NAME} ${OUT_FILE_NAME}
			)
		set_target_properties(${TARGET_NAME} PROPERTIES IMPORTED_LOCATION ${OUT_FILE_NAME}) # IMPORTED_LINK_INTERFACE_LIBRARIES ${OUT_FILE_NAME})
		add_custom_target(${TARGET_NAME}_copy DEPENDS ${OUT_FILE_NAME})
		add_dependencies(${TARGET_NAME} ${TARGET_NAME}_copy)
	endif (BINARY_SYSTEM STREQUAL CMAKE_SYSTEM_NAME AND BINARY_ARCH STREQUAL CMAKE_SYSTEM_PROCESSOR)
	get_target_property(${TARGET_NAME}_TYPE ${TARGET_NAME} TYPE)
	if (${TARGET_NAME}_TYPE)
		set(${TARGET_NAME}_FOUND TRUE PARENT_SCOPE)
	else (${TARGET_NAME}_TYPE)
		set(${TARGET_NAME}_FOUND FALSE PARENT_SCOPE)
	endif (${TARGET_NAME}_TYPE)
endfunction(binary_file BINARY_SYSTEM BINARY_ARCH FILE_NAME)

#binary_file(${PROJECT_NAME} build/qnx/libplib.a QNX x86)